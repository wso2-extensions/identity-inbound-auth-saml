Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/SSOServiceProviderConfigManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/SSOServiceProviderConfigManager.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/SSOServiceProviderConfigManager.java	(revision )
@@ -19,7 +19,8 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
+
 //import org.wso2.carbon.identity.saml.metadata.model.SAMLSSOServiceProviderDO;
 
 import java.util.Enumeration;
Index: components/org.wso2.carbon.identity.sso.saml/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/pom.xml	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/pom.xml	(revision )
@@ -81,6 +81,19 @@
             <groupId>org.wso2.orbit.org.owasp.encoder</groupId>
             <artifactId>encoder</artifactId>
         </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon.identity</groupId>
+            <artifactId>org.wso2.carbon.identity.sso.saml.common</artifactId>
+            <version>5.1.2-SNAPSHOT</version>
+        </dependency>
+        <dependency>
+            <groupId>org.wso2.carbon.identity</groupId>
+            <artifactId>org.wso2.carbon.identity.saml.metadata</artifactId>
+            <version>5.1.2-SNAPSHOT</version>
+        </dependency>
+
+
+
     </dependencies>
 
     <build>
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/SPInitLogoutRequestProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/SPInitLogoutRequestProcessor.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/SPInitLogoutRequestProcessor.java	(revision )
@@ -26,7 +26,7 @@
 import org.opensaml.saml2.core.SessionIndex;
 import org.wso2.carbon.identity.application.common.util.IdentityApplicationManagementUtil;
 import org.wso2.carbon.identity.base.IdentityException;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.core.util.IdentityUtil;
 import org.wso2.carbon.identity.sso.saml.SAMLSSOConstants;
 import org.wso2.carbon.identity.sso.saml.builders.SingleLogoutMessageBuilder;
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/validators/SPInitSSOAuthnRequestValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/validators/SPInitSSOAuthnRequestValidator.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/validators/SPInitSSOAuthnRequestValidator.java	(revision )
@@ -26,7 +26,7 @@
 import org.opensaml.saml2.core.Subject;
 import org.wso2.carbon.identity.base.IdentityException;
 
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.core.util.IdentityUtil;
 //import org.wso2.carbon.identity.saml.metadata.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.sso.saml.SAMLSSOConstants;
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/admin/FileBasedConfigManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/admin/FileBasedConfigManager.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/admin/FileBasedConfigManager.java	(revision )
@@ -25,7 +25,7 @@
 import org.w3c.dom.NodeList;
 import org.wso2.carbon.identity.application.common.util.IdentityApplicationManagementUtil;
 
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.core.util.IdentityUtil;
  import org.wso2.carbon.identity.sso.saml.SAMLSSOConstants;
 import org.wso2.carbon.identity.sso.saml.SSOServiceProviderConfigManager;
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/IdPInitLogoutRequestProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/IdPInitLogoutRequestProcessor.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/IdPInitLogoutRequestProcessor.java	(revision )
@@ -22,7 +22,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.opensaml.saml2.core.LogoutRequest;
 import org.wso2.carbon.identity.base.IdentityException;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.sso.saml.SAMLSSOConstants;
 import org.wso2.carbon.identity.sso.saml.builders.SingleLogoutMessageBuilder;
 import org.wso2.carbon.identity.sso.saml.dto.QueryParamDTO;
Index: components/org.wso2.carbon.identity.saml.metadata/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.saml.metadata/pom.xml	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.saml.metadata/pom.xml	(revision )
@@ -81,6 +81,17 @@
             <groupId>org.wso2.orbit.org.owasp.encoder</groupId>
             <artifactId>encoder</artifactId>
         </dependency>
+        <!--<dependency>-->
+            <!--<groupId>org.wso2.carbon.identity</groupId>-->
+            <!--<artifactId>org.wso2.carbon.identity.sso.saml</artifactId>-->
+            <!--<version>5.1.2-SNAPSHOT</version>-->
+        <!--</dependency>-->
+        <dependency>
+            <groupId>org.wso2.carbon.identity</groupId>
+            <artifactId>org.wso2.carbon.identity.sso.saml.common</artifactId>
+            <version>5.1.2-SNAPSHOT</version>
+        </dependency>
+
     </dependencies>
 
     <build>
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/SPInitSSOAuthnRequestProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/SPInitSSOAuthnRequestProcessor.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/SPInitSSOAuthnRequestProcessor.java	(revision )
@@ -25,7 +25,7 @@
 import org.wso2.carbon.context.RegistryType;
 import org.wso2.carbon.identity.base.IdentityException;
 //import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.core.persistence.IdentityPersistenceManager;
 import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
 
@@ -225,7 +225,7 @@
                 IdentityPersistenceManager persistenceManager = IdentityPersistenceManager.getPersistanceManager();
                 Registry registry = (Registry) PrivilegedCarbonContext.getThreadLocalCarbonContext().getRegistry
                         (RegistryType.SYSTEM_CONFIGURATION);
-                ssoIdpConfigs = persistenceManager.getServiceProvider(registry, authnReqDTO.getIssuer());
+                ssoIdpConfigs =null;// persistenceManager.getServiceProvider(registry, authnReqDTO.getIssuer());
                 authnReqDTO.setStratosDeployment(false); // not stratos
             } else {
                 authnReqDTO.setStratosDeployment(true); // stratos deployment
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/session/SessionInfoData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/session/SessionInfoData.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/session/SessionInfoData.java	(revision )
@@ -21,7 +21,7 @@
 
 //import org.wso2.carbon.identity.saml.metadata.model.SAMLSSOServiceProviderDO;
 
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 
 import java.io.Serializable;
 import java.util.Map;
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ pom.xml	(revision )
@@ -153,6 +153,11 @@
                 <artifactId>axis2-client</artifactId>
                 <version>${axis2.wso2.version}</version>
             </dependency>
+
+
+
+
+
         </dependencies>
     </dependencyManagement>
 
@@ -299,8 +304,7 @@
         <module>features/org.wso2.carbon.identity.sso.saml.feature</module>
         <module>features/org.wso2.carbon.identity.sso.saml.server.feature</module>
         <module>features/org.wso2.carbon.identity.sso.saml.ui.feature</module>
-        <module>components</module>
-        <module>components/metadata</module>
+        <module>components/org.wso2.carbon.identity.saml.metadata</module>
     </modules>
 
     <properties>
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/IdPInitSSOAuthnRequestProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/IdPInitSSOAuthnRequestProcessor.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/processors/IdPInitSSOAuthnRequestProcessor.java	(revision )
@@ -24,7 +24,7 @@
 import org.wso2.carbon.context.PrivilegedCarbonContext;
 import org.wso2.carbon.context.RegistryType;
 import org.wso2.carbon.identity.base.IdentityException;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.core.persistence.IdentityPersistenceManager;
 import org.wso2.carbon.identity.sso.saml.SAMLSSOConstants;
 import org.wso2.carbon.identity.sso.saml.SSOServiceProviderConfigManager;
@@ -201,8 +201,8 @@
                 IdentityPersistenceManager persistenceManager = IdentityPersistenceManager
                         .getPersistanceManager();
                 Registry registry = (Registry) PrivilegedCarbonContext.getThreadLocalCarbonContext().getRegistry(RegistryType.SYSTEM_CONFIGURATION);
-                ssoIdpConfigs = persistenceManager.getServiceProvider(registry,
-                        authnReqDTO.getIssuer());
+                //ssoIdpConfigs = persistenceManager.getServiceProvider(registry,
+                  //      authnReqDTO.getIssuer());
                 authnReqDTO.setStratosDeployment(false); // not stratos
             } else {
                 authnReqDTO.setStratosDeployment(true); // stratos deployment
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/admin/SAMLSSOConfigAdmin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/admin/SAMLSSOConfigAdmin.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/admin/SAMLSSOConfigAdmin.java	(revision )
@@ -26,11 +26,11 @@
 import org.wso2.carbon.identity.base.IdentityException;
 //import org.wso2.carbon.identity.saml.metadata.SAMLSSOServiceProviderDO;
 //import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.core.persistence.IdentityPersistenceManager;
 import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
 import org.wso2.carbon.identity.core.util.IdentityUtil;
-//import org.wso2.carbon.identity.saml.metadata.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.saml.metadata.util.Parser;
 import org.wso2.carbon.identity.sso.saml.SSOServiceProviderConfigManager;
 import org.wso2.carbon.identity.sso.saml.dto.SAMLSSOServiceProviderDTO;
@@ -76,7 +76,7 @@
                 log.error(message);
                 return false;
             }
-            return persistenceManager.addServiceProvider(registry, serviceProviderDO);
+            return persistenceManager.addServiceProvider(registry,null/* serviceProviderDO*/);
         } catch (IdentityException e) {
             log.error("Error obtaining a registry for adding a new service provider", e);
             throw IdentityException.error("Error obtaining a registry for adding a new service provider", e);
@@ -126,7 +126,7 @@
         }
 
         try {
-            SAMLSSOServiceProviderDO serviceProviderDO = persistenceManager.uploadServiceProvider(registry, samlssoServiceProviderDO);
+            SAMLSSOServiceProviderDO serviceProviderDO = null;//persistenceManager.uploadServiceProvider(registry, samlssoServiceProviderDO);
 
             return createSAMLSSOServiceProviderDTO(serviceProviderDO);
         } catch (IdentityException e) {
@@ -269,51 +269,51 @@
         try {
             IdentityPersistenceManager persistenceManager = IdentityPersistenceManager
                     .getPersistanceManager();
-            SAMLSSOServiceProviderDO[] providersSet = persistenceManager.
-                    getServiceProviders(registry);
-            serviceProviders = new SAMLSSOServiceProviderDTO[providersSet.length];
-
-            for (int i = 0; i < providersSet.length; i++) {
-                SAMLSSOServiceProviderDO providerDO = providersSet[i];
-                SAMLSSOServiceProviderDTO providerDTO = new SAMLSSOServiceProviderDTO();
-                providerDTO.setIssuer(providerDO.getIssuer());
-                providerDTO.setAssertionConsumerUrls(providerDO.getAssertionConsumerUrls());
-                providerDTO.setDefaultAssertionConsumerUrl(providerDO.getDefaultAssertionConsumerUrl());
-                providerDTO.setSigningAlgorithmURI(providerDO.getSigningAlgorithmUri());
-                providerDTO.setDigestAlgorithmURI(providerDO.getDigestAlgorithmUri());
-                providerDTO.setCertAlias(providerDO.getCertAlias());
-                providerDTO.setAttributeConsumingServiceIndex(providerDO.getAttributeConsumingServiceIndex());
-                providerDTO.setDoSignResponse(providerDO.isDoSignResponse());
-                providerDTO.setDoSignAssertions(providerDO.isDoSignAssertions());
-                providerDTO.setDoSingleLogout(providerDO.isDoSingleLogout());
-
-                if (providerDO.getLoginPageURL() == null || "null".equals(providerDO.getLoginPageURL())) {
-                    providerDTO.setLoginPageURL("");
-                } else {
-                    providerDTO.setLoginPageURL(providerDO.getLoginPageURL());
-                }
-
-                providerDTO.setSloResponseURL(providerDO.getSloResponseURL());
-                providerDTO.setSloRequestURL(providerDO.getSloRequestURL());
-                providerDTO.setRequestedClaims(providerDO.getRequestedClaims());
-                providerDTO.setRequestedAudiences(providerDO.getRequestedAudiences());
-                providerDTO.setRequestedRecipients(providerDO.getRequestedRecipients());
-                providerDTO.setEnableAttributesByDefault(providerDO.isEnableAttributesByDefault());
-                providerDTO.setNameIdClaimUri(providerDO.getNameIdClaimUri());
-                providerDTO.setNameIDFormat(providerDO.getNameIDFormat());
-
-                if (providerDTO.getNameIDFormat() == null) {
-                    providerDTO.setNameIDFormat(NameIdentifier.EMAIL);
-                }
-                providerDTO.setNameIDFormat(providerDTO.getNameIDFormat().replace(":", "/"));
-
-                providerDTO.setIdPInitSSOEnabled(providerDO.isIdPInitSSOEnabled());
-                providerDTO.setIdPInitSLOEnabled(providerDO.isIdPInitSLOEnabled());
-                providerDTO.setIdpInitSLOReturnToURLs(providerDO.getIdpInitSLOReturnToURLs());
-                providerDTO.setDoEnableEncryptedAssertion(providerDO.isDoEnableEncryptedAssertion());
-                providerDTO.setDoValidateSignatureInRequests(providerDO.isDoValidateSignatureInRequests());
-                serviceProviders[i] = providerDTO;
-            }
+            //SAMLSSOServiceProviderDO[] providersSet = persistenceManager.
+            //        getServiceProviders(registry);
+//            serviceProviders = new SAMLSSOServiceProviderDTO[providersSet.length];
+//
+//            for (int i = 0; i < providersSet.length; i++) {
+//                SAMLSSOServiceProviderDO providerDO = providersSet[i];
+//                SAMLSSOServiceProviderDTO providerDTO = new SAMLSSOServiceProviderDTO();
+//                providerDTO.setIssuer(providerDO.getIssuer());
+//                providerDTO.setAssertionConsumerUrls(providerDO.getAssertionConsumerUrls());
+//                providerDTO.setDefaultAssertionConsumerUrl(providerDO.getDefaultAssertionConsumerUrl());
+//                providerDTO.setSigningAlgorithmURI(providerDO.getSigningAlgorithmUri());
+//                providerDTO.setDigestAlgorithmURI(providerDO.getDigestAlgorithmUri());
+//                providerDTO.setCertAlias(providerDO.getCertAlias());
+//                providerDTO.setAttributeConsumingServiceIndex(providerDO.getAttributeConsumingServiceIndex());
+//                providerDTO.setDoSignResponse(providerDO.isDoSignResponse());
+//                providerDTO.setDoSignAssertions(providerDO.isDoSignAssertions());
+//                providerDTO.setDoSingleLogout(providerDO.isDoSingleLogout());
+//
+//                if (providerDO.getLoginPageURL() == null || "null".equals(providerDO.getLoginPageURL())) {
+//                    providerDTO.setLoginPageURL("");
+//                } else {
+//                    providerDTO.setLoginPageURL(providerDO.getLoginPageURL());
+//                }
+//
+//                providerDTO.setSloResponseURL(providerDO.getSloResponseURL());
+//                providerDTO.setSloRequestURL(providerDO.getSloRequestURL());
+//                providerDTO.setRequestedClaims(providerDO.getRequestedClaims());
+//                providerDTO.setRequestedAudiences(providerDO.getRequestedAudiences());
+//                providerDTO.setRequestedRecipients(providerDO.getRequestedRecipients());
+//                providerDTO.setEnableAttributesByDefault(providerDO.isEnableAttributesByDefault());
+//                providerDTO.setNameIdClaimUri(providerDO.getNameIdClaimUri());
+//                providerDTO.setNameIDFormat(providerDO.getNameIDFormat());
+//
+//                if (providerDTO.getNameIDFormat() == null) {
+//                    providerDTO.setNameIDFormat(NameIdentifier.EMAIL);
+//                }
+//                providerDTO.setNameIDFormat(providerDTO.getNameIDFormat().replace(":", "/"));
+//
+//                providerDTO.setIdPInitSSOEnabled(providerDO.isIdPInitSSOEnabled());
+//                providerDTO.setIdPInitSLOEnabled(providerDO.isIdPInitSLOEnabled());
+//                providerDTO.setIdpInitSLOReturnToURLs(providerDO.getIdpInitSLOReturnToURLs());
+//                providerDTO.setDoEnableEncryptedAssertion(providerDO.isDoEnableEncryptedAssertion());
+//                providerDTO.setDoValidateSignatureInRequests(providerDO.isDoValidateSignatureInRequests());
+//                serviceProviders[i] = providerDTO;
+//            }
         } catch (IdentityException e) {
             log.error("Error obtaining a registry intance for reading service provider list", e);
             throw IdentityException.error("Error obtaining a registry intance for reading service provider list", e);
Index: components/org.wso2.carbon.identity.sso.saml.common/src/main/java/org/wso2/carbon/identity/sso/saml/common/model/SAMLSSOServiceProviderDO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml.common/src/main/java/org/wso2/carbon/identity/sso/saml/common/model/SAMLSSOServiceProviderDO.java	(revision )
+++ components/org.wso2.carbon.identity.sso.saml.common/src/main/java/org/wso2/carbon/identity/sso/saml/common/model/SAMLSSOServiceProviderDO.java	(revision )
@@ -0,0 +1,510 @@
+/*
+ * Copyright 2005-2007 WSO2, Inc. (http://wso2.com)
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.wso2.carbon.identity.sso.saml.common.model;
+
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang.StringUtils;
+import org.wso2.carbon.identity.base.IdentityConstants;
+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;
+import org.wso2.carbon.identity.core.util.IdentityUtil;
+
+import java.io.Serializable;
+import java.security.cert.X509Certificate;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+public class SAMLSSOServiceProviderDO implements Serializable {
+
+    private static final long serialVersionUID = 7998724745099007704L;
+
+    String tenantDomain;
+    private String issuer;
+    private String assertionConsumerUrl;
+    private String[] assertionConsumerUrls;
+    private List<String> assertionConsumerUrlList;
+    private String defaultAssertionConsumerUrl;
+    private String certAlias;
+    private String sloResponseURL;
+    private String sloRequestURL;
+    private boolean doSingleLogout;
+    private String loginPageURL;
+    private boolean doSignResponse;
+    private boolean doSignAssertions;
+    private String attributeConsumingServiceIndex;
+    private String[] requestedClaims;
+    private List<String> requestedClaimsList;
+    private String[] requestedAudiences;
+    private List<String> requestedAudiencesList;
+    private String[] requestedRecipients;
+    private List<String> requestedRecipientsList;
+    private boolean enableAttributesByDefault;
+    private String nameIdClaimUri;
+    private String nameIDFormat;
+    private boolean isIdPInitSSOEnabled;
+    private boolean idPInitSLOEnabled;
+    private String[] idpInitSLOReturnToURLs;
+    private List<String> idpInitSLOReturnToURLList;
+    private boolean doEnableEncryptedAssertion;
+    private boolean doValidateSignatureInRequests;
+    private String signingAlgorithmUri;
+    private String digestAlgorithmUri;
+    private String signingCertificate ;
+    private String encryptionCertificate ;
+    private X509Certificate x509Certificate;
+
+
+    public SAMLSSOServiceProviderDO() {
+        if (StringUtils.isNotBlank(IdentityUtil.getProperty(IdentityConstants.ServerConfig
+                .SSO_DEFAULT_SIGNING_ALGORITHM))) {
+            signingAlgorithmUri = IdentityUtil.getProperty(IdentityConstants.ServerConfig
+                    .SSO_DEFAULT_SIGNING_ALGORITHM).trim();
+        } else {
+            signingAlgorithmUri = IdentityCoreConstants.XML_SIGNATURE_ALGORITHM_RSA_SHA1_URI;
+        }
+        if (StringUtils.isNotBlank(IdentityUtil.getProperty(IdentityConstants.ServerConfig
+                .SSO_DEFAULT_DIGEST_ALGORITHM))) {
+            digestAlgorithmUri = IdentityUtil.getProperty(IdentityConstants.ServerConfig
+                    .SSO_DEFAULT_DIGEST_ALGORITHM).trim();
+        } else {
+            digestAlgorithmUri = IdentityCoreConstants.XML_DIGEST_ALGORITHM_SHA1;
+        }
+    }
+
+    public String getSigningCertificate() {
+        return signingCertificate;
+    }
+
+    public void setSigningCertificate(String signingCertificate) {
+        this.signingCertificate = signingCertificate;
+    }
+
+    public String getNameIDFormat() {
+        return nameIDFormat;
+    }
+
+    public void setNameIDFormat(String nameIDFormat) {
+        this.nameIDFormat = nameIDFormat;
+    }
+
+    public String getEncryptionCertificatee() {
+        return encryptionCertificate;
+    }
+
+    public void setEncryptionCertificate(String encryptionCertificate) {
+        this.encryptionCertificate= encryptionCertificate;
+    }
+
+
+
+
+    public String getNameIdClaimUri() {
+        return nameIdClaimUri;
+    }
+
+    public void setNameIdClaimUri(String nameIdClaimUri) {
+        this.nameIdClaimUri = nameIdClaimUri;
+    }
+
+    public boolean isEnableAttributesByDefault() {
+        return enableAttributesByDefault;
+    }
+
+    public void setEnableAttributesByDefault(boolean enableAttributesByDefault) {
+        this.enableAttributesByDefault = enableAttributesByDefault;
+    }
+
+    public String getIssuer() {
+        return issuer;
+    }
+
+    public void setIssuer(String issuer) {
+        if (issuer != null) {
+            this.issuer = issuer.replaceAll("[\n\r]", "").trim();
+        }
+    }
+
+    public String getAssertionConsumerUrl() {
+        return assertionConsumerUrl;
+    }
+
+    public void setAssertionConsumerUrl(String assertionConsumerUrl) {
+        if (assertionConsumerUrl != null) {
+            this.assertionConsumerUrl = assertionConsumerUrl.replaceAll("[\n\r]", "").trim();
+        }
+    }
+
+    public String getCertAlias() {
+        return certAlias;
+    }
+
+    public void setCertAlias(String certAlias) {
+        this.certAlias = certAlias;
+    }
+
+    public String getSloResponseURL() {
+        return sloResponseURL;
+    }
+
+    public void setSloResponseURL(String sloResponseURL) {
+        if (sloResponseURL != null) {
+            this.sloResponseURL = sloResponseURL.replaceAll("[\n\r]", "").trim();
+        }
+    }
+
+    public boolean isDoSingleLogout() {
+        return doSingleLogout;
+    }
+
+    public void setDoSingleLogout(boolean doSingleLogout) {
+        this.doSingleLogout = doSingleLogout;
+    }
+
+    public String getLoginPageURL() {
+        return loginPageURL;
+    }
+
+    public void setLoginPageURL(String loginPageURL) {
+        if(StringUtils.isNotBlank(loginPageURL)) {
+            this.loginPageURL = loginPageURL.replaceAll("[\n\r]", "").trim();
+        } else {
+            this.loginPageURL = null;
+        }
+    }
+
+    public boolean isDoSignAssertions() {
+        return doSignAssertions;
+    }
+
+    public void setDoSignAssertions(boolean doSignAssertions) {
+        this.doSignAssertions = doSignAssertions;
+    }
+
+    public String getAttributeConsumingServiceIndex() {
+        return attributeConsumingServiceIndex;
+    }
+
+    public void setAttributeConsumingServiceIndex(String attributeConsumingServiceIndex) {
+        this.attributeConsumingServiceIndex = attributeConsumingServiceIndex;
+    }
+
+    public String getSigningAlgorithmUri() {
+        return signingAlgorithmUri;
+    }
+
+    public void setSigningAlgorithmUri(String signingAlgorithmUri) {
+        if (StringUtils.isNotEmpty(signingAlgorithmUri)) {
+            this.signingAlgorithmUri = signingAlgorithmUri;
+        }
+    }
+
+    public String getDigestAlgorithmUri() {
+        return digestAlgorithmUri;
+    }
+
+    public void setDigestAlgorithmUri(String digestAlgorithmUri) {
+        if (StringUtils.isNotEmpty(digestAlgorithmUri)) {
+            this.digestAlgorithmUri = digestAlgorithmUri;
+        }
+    }
+    /**
+     * @return the requestedClaims
+     */
+    public String[] getRequestedClaims() {
+        if (requestedClaims != null) {
+            return requestedClaims.clone();
+        } else {
+            return ArrayUtils.EMPTY_STRING_ARRAY;
+        }
+    }
+
+    /**
+     * @param requestedClaims the requestedClaims to set
+     */
+    public void setRequestedClaims(List<String> requestedClaims) {
+        if (requestedClaims != null) {
+            this.requestedClaimsList = requestedClaims;
+            this.requestedClaims = requestedClaims.toArray(new String[requestedClaims.size()]);
+        }
+    }
+
+    /**
+     * @param requestedClaims the requestedClaims to set
+     */
+    public void setRequestedClaims(String[] requestedClaims) {
+        if (requestedClaims != null) {
+            this.requestedClaims = requestedClaims.clone();
+            this.requestedClaimsList = Arrays.asList(requestedClaims);
+        }
+    }
+
+    /**
+     * @return the requestedClaims
+     */
+    public List<String> getRequestedClaimsList() {
+        if (requestedClaimsList != null) {
+            return requestedClaimsList;
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    /**
+     * @return the requestedAudiences
+     */
+    public String[] getRequestedAudiences() {
+        if (requestedAudiences != null) {
+            return requestedAudiences.clone();
+        } else {
+            return ArrayUtils.EMPTY_STRING_ARRAY;
+        }
+    }
+
+    /**
+     * @param requestedAudiences the requestedAudiences to set
+     */
+    public void setRequestedAudiences(List<String> requestedAudiences) {
+        if (requestedAudiences != null) {
+            this.requestedAudiencesList = requestedAudiences;
+            this.requestedAudiences = requestedAudiences.toArray(new String[requestedAudiencesList.size()]);
+        }
+    }
+
+    /**
+     * @param requestedAudiences the requestedAudiences to set
+     */
+    public void setRequestedAudiences(String[] requestedAudiences) {
+        if (requestedAudiences != null) {
+            this.requestedAudiences = requestedAudiences.clone();
+            this.requestedAudiencesList = Arrays.asList(requestedAudiences);
+        }
+    }
+
+    /**
+     * @return the requestedAudiences
+     */
+    public List<String> getRequestedAudiencesList() {
+        if (requestedAudiencesList != null) {
+            return requestedAudiencesList;
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    /**
+     * @return the requestedRecipients
+     */
+    public String[] getRequestedRecipients() {
+        if (requestedRecipients != null) {
+            return requestedRecipients.clone();
+        } else {
+            return ArrayUtils.EMPTY_STRING_ARRAY;
+        }
+    }
+
+    /**
+     * @param requestedRecipientsList the requestedRecipients to set
+     */
+    public void setRequestedRecipients(List<String> requestedRecipientsList) {
+        this.requestedRecipientsList = requestedRecipientsList;
+        if (requestedRecipientsList != null) {
+            this.requestedRecipients = requestedRecipientsList.toArray(new String[requestedRecipientsList.size()]);
+        } else {
+            this.requestedRecipients = null;
+        }
+    }
+
+    /**
+     * @param requestedRecipients the requestedRecipients to set
+     */
+    public void setRequestedRecipients(String[] requestedRecipients) {
+        if (requestedRecipients != null) {
+            this.requestedRecipients = requestedRecipients.clone();
+            this.requestedRecipientsList = Arrays.asList(requestedRecipients);
+        } else {
+            this.requestedRecipients = null;
+            this.requestedRecipientsList = null;
+        }
+    }
+
+    /**
+     * @return the requestedRecipients
+     */
+    public List<String> getRequestedRecipientsList() {
+        if (requestedRecipientsList != null) {
+            return requestedRecipientsList;
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    /**
+     * @return the doSignResponse
+     */
+    public boolean isDoSignResponse() {
+        return doSignResponse;
+    }
+
+    /**
+     * @param doSignResponse the doSignResponse to set
+     */
+    public void setDoSignResponse(boolean doSignResponse) {
+        this.doSignResponse = doSignResponse;
+    }
+
+    public boolean isIdPInitSSOEnabled() {
+        return isIdPInitSSOEnabled;
+    }
+
+    public void setIdPInitSSOEnabled(boolean idPInitSSOEnabled) {
+        isIdPInitSSOEnabled = idPInitSSOEnabled;
+    }
+
+    public boolean isDoEnableEncryptedAssertion() {
+        return doEnableEncryptedAssertion;
+    }
+
+    public void setDoEnableEncryptedAssertion(boolean doEnableEncryptedAssertion) {
+        this.doEnableEncryptedAssertion = doEnableEncryptedAssertion;
+    }
+
+    public boolean isDoValidateSignatureInRequests() {
+        return doValidateSignatureInRequests;
+    }
+
+    public void setDoValidateSignatureInRequests(boolean doValidateSignatureInRequests) {
+        this.doValidateSignatureInRequests = doValidateSignatureInRequests;
+    }
+
+    public String getTenantDomain() {
+        return tenantDomain;
+    }
+
+    public void setTenantDomain(String tenantDomain) {
+        this.tenantDomain = tenantDomain;
+    }
+
+    public String[] getAssertionConsumerUrls() {
+        if (assertionConsumerUrls != null) {
+            return assertionConsumerUrls.clone();
+        } else {
+            return ArrayUtils.EMPTY_STRING_ARRAY;
+        }
+    }
+
+    public List<String> getAssertionConsumerUrlList() {
+        if (assertionConsumerUrlList != null) {
+            return assertionConsumerUrlList;
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    public void setAssertionConsumerUrls(String[] assertionConsumerUrls) {
+        if (assertionConsumerUrls != null) {
+            this.assertionConsumerUrls = assertionConsumerUrls.clone();
+            this.assertionConsumerUrlList = Arrays.asList(assertionConsumerUrls);
+        } else {
+            this.assertionConsumerUrls = null;
+            this.assertionConsumerUrlList = null;
+        }
+    }
+
+    public void setAssertionConsumerUrls(List<String> assertionConsumerUrlList) {
+        this.assertionConsumerUrlList = assertionConsumerUrlList;
+        if (assertionConsumerUrlList != null) {
+            this.assertionConsumerUrls = assertionConsumerUrlList.toArray(new String[assertionConsumerUrlList.size()]);
+        } else {
+            this.assertionConsumerUrls = null;
+        }
+    }
+
+    public String getDefaultAssertionConsumerUrl() {
+        return defaultAssertionConsumerUrl;
+    }
+
+    public void setDefaultAssertionConsumerUrl(String defaultAssertionConsumerUrl) {
+        if(StringUtils.isNotBlank(defaultAssertionConsumerUrl)) {
+            this.defaultAssertionConsumerUrl = defaultAssertionConsumerUrl.replaceAll("[\n\r]", "").trim();
+        } else {
+            this.defaultAssertionConsumerUrl = null;
+        }
+    }
+
+    public String getSloRequestURL() {
+        return sloRequestURL;
+    }
+
+    public void setSloRequestURL(String sloRequestURL) {
+        if(StringUtils.isNotBlank(sloRequestURL)) {
+            this.sloRequestURL = sloRequestURL.replaceAll("[\n\r]", "").trim();
+        } else {
+            this.sloRequestURL = null;
+        }
+    }
+
+    public boolean isIdPInitSLOEnabled() {
+        return idPInitSLOEnabled;
+    }
+
+    public void setIdPInitSLOEnabled(boolean idPInitSLOEnabled) {
+        this.idPInitSLOEnabled = idPInitSLOEnabled;
+    }
+
+    public String[] getIdpInitSLOReturnToURLs() {
+        if (idpInitSLOReturnToURLs != null) {
+            return idpInitSLOReturnToURLs.clone();
+        } else {
+            return ArrayUtils.EMPTY_STRING_ARRAY;
+        }
+    }
+
+    public void setIdpInitSLOReturnToURLs(String[] idpInitSLOReturnToURLs) {
+        if (idpInitSLOReturnToURLs != null) {
+            this.idpInitSLOReturnToURLs = idpInitSLOReturnToURLs.clone();
+            this.idpInitSLOReturnToURLList = Arrays.asList(idpInitSLOReturnToURLs);
+        } else {
+            this.idpInitSLOReturnToURLs = null;
+            this.idpInitSLOReturnToURLList = null;
+        }
+    }
+
+    public List<String> getIdpInitSLOReturnToURLList() {
+        if (idpInitSLOReturnToURLList != null) {
+            return idpInitSLOReturnToURLList;
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    public void setIdpInitSLOReturnToURLs(List<String> idpInitSLOReturnToURLList) {
+        this.idpInitSLOReturnToURLList = idpInitSLOReturnToURLList;
+        if (idpInitSLOReturnToURLList != null) {
+            this.idpInitSLOReturnToURLs = idpInitSLOReturnToURLList.toArray(new String[idpInitSLOReturnToURLList.size()]);
+        } else {
+            this.idpInitSLOReturnToURLs = null;
+        }
+    }
+
+    public X509Certificate getX509Certificate() {
+        return x509Certificate;
+    }
+
+    public void setX509Certificate(X509Certificate x509Certificate) {
+        this.x509Certificate = x509Certificate;
+    }
+}
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/util/SAMLSSOUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/util/SAMLSSOUtil.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/util/SAMLSSOUtil.java	(revision )
@@ -64,7 +64,7 @@
 import org.wso2.carbon.identity.base.IdentityConstants;
 import org.wso2.carbon.identity.base.IdentityException;
 
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.core.persistence.IdentityPersistenceManager;
 import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
 import org.wso2.carbon.identity.core.util.IdentityUtil;
@@ -971,7 +971,7 @@
 
             Registry registry = (Registry) PrivilegedCarbonContext.getThreadLocalCarbonContext().
                     getRegistry(RegistryType.SYSTEM_CONFIGURATION);
-            spDO = persistenceManager.getServiceProvider(registry, authnReqDTO.getIssuer());
+            //spDO = persistenceManager.getServiceProvider(registry, authnReqDTO.getIssuer());
         }
 
         if (!authnReqDTO.isIdPInitSSOEnabled()) {
@@ -1391,7 +1391,7 @@
             IdentityPersistenceManager persistenceManager = IdentityPersistenceManager.getPersistanceManager();
             Registry registry = (Registry) PrivilegedCarbonContext.getThreadLocalCarbonContext().getRegistry
                     (RegistryType.SYSTEM_CONFIGURATION);
-            SAMLSSOServiceProviderDO spDO = persistenceManager.getServiceProvider(registry, issuerName);
+            SAMLSSOServiceProviderDO spDO=null;// = persistenceManager.getServiceProvider(registry, issuerName);
             if (StringUtils.isBlank(requestedACSUrl) || !spDO.getAssertionConsumerUrlList().contains
                     (requestedACSUrl)) {
                 String msg = "ALERT: Invalid Assertion Consumer URL value '" + requestedACSUrl + "' in the " +
Index: components/org.wso2.carbon.identity.saml.metadata/src/main/java/org/wso2/carbon/identity/saml/metadata/util/Parser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.saml.metadata/src/main/java/org/wso2/carbon/identity/saml/metadata/util/Parser.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.saml.metadata/src/main/java/org/wso2/carbon/identity/saml/metadata/util/Parser.java	(revision )
@@ -25,17 +25,10 @@
 import org.opensaml.saml2.metadata.provider.MetadataProviderException;
 import org.opensaml.xml.XMLObject;
 import org.opensaml.xml.parse.BasicParserPool;
-import org.opensaml.xml.security.keyinfo.KeyInfoHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
-import org.wso2.carbon.core.util.KeyStoreManager;
-import org.wso2.carbon.identity.base.IdentityException;
-import org.wso2.carbon.identity.core.dao.SAMLSSOServiceProviderDAO;
-import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
-import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.registry.core.Registry;
-import org.wso2.carbon.registry.core.session.UserRegistry;
 import org.xml.sax.SAXException;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -45,9 +38,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-/**
- * Created by pasindutennage on 9/7/16.
- */
 public class Parser {
 
     private static Log log = LogFactory.getLog(Parser.class);
Index: components/org.wso2.carbon.identity.sso.saml.common/src/main/java/org/wso2/carbon/identity/sso/saml/common/dao/SAMLSSOServiceProviderDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml.common/src/main/java/org/wso2/carbon/identity/sso/saml/common/dao/SAMLSSOServiceProviderDAO.java	(revision )
+++ components/org.wso2.carbon.identity.sso.saml.common/src/main/java/org/wso2/carbon/identity/sso/saml/common/dao/SAMLSSOServiceProviderDAO.java	(revision )
@@ -0,0 +1,505 @@
+/*
+ * Copyright 2005-2007 WSO2, Inc. (http://wso2.com)
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.wso2.carbon.identity.sso.saml.common.dao;
+
+import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.wso2.carbon.identity.base.IdentityException;
+import org.wso2.carbon.identity.core.IdentityRegistryResources;
+import org.wso2.carbon.identity.core.dao.AbstractDAO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
+import org.wso2.carbon.registry.core.Registry;
+import org.wso2.carbon.registry.core.Resource;
+import org.wso2.carbon.registry.core.exceptions.RegistryException;
+import org.wso2.carbon.registry.core.jdbc.utils.Transaction;
+import org.wso2.carbon.registry.core.session.UserRegistry;
+import org.wso2.carbon.user.api.UserStoreException;
+
+public class SAMLSSOServiceProviderDAO extends AbstractDAO<SAMLSSOServiceProviderDO> {
+
+    private static Log log = LogFactory.getLog(SAMLSSOServiceProviderDAO.class);
+
+    public SAMLSSOServiceProviderDAO(Registry registry) {
+        this.registry = registry;
+    }
+
+    protected SAMLSSOServiceProviderDO resourceToObject(Resource resource) {
+        SAMLSSOServiceProviderDO serviceProviderDO = new SAMLSSOServiceProviderDO();
+        serviceProviderDO.setIssuer(resource
+                .getProperty(IdentityRegistryResources.PROP_SAML_SSO_ISSUER));
+        serviceProviderDO.setAssertionConsumerUrls(resource.getPropertyValues(
+                IdentityRegistryResources.PROP_SAML_SSO_ASSERTION_CONS_URLS));
+        serviceProviderDO.setDefaultAssertionConsumerUrl(resource.getProperty(
+                IdentityRegistryResources.PROP_DEFAULT_SAML_SSO_ASSERTION_CONS_URL));
+        serviceProviderDO.setCertAlias(resource
+                .getProperty(IdentityRegistryResources.PROP_SAML_SSO_ISSUER_CERT_ALIAS));
+
+        if (StringUtils.isNotEmpty(resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_SIGNING_ALGORITHM))) {
+            serviceProviderDO.setSigningAlgorithmUri(resource.getProperty(IdentityRegistryResources
+                    .PROP_SAML_SSO_SIGNING_ALGORITHM));
+        }
+
+        if (StringUtils.isNotEmpty(resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_DIGEST_ALGORITHM))) {
+            serviceProviderDO.setDigestAlgorithmUri(resource.getProperty(IdentityRegistryResources
+                    .PROP_SAML_SSO_DIGEST_ALGORITHM));
+        }
+
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_DO_SINGLE_LOGOUT) != null) {
+            serviceProviderDO.setDoSingleLogout(new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_DO_SINGLE_LOGOUT).trim()));
+        }
+
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_NAMEID_FORMAT) != null) {
+            serviceProviderDO.setNameIDFormat(resource.
+                    getProperty(IdentityRegistryResources.PROP_SAML_SSO_NAMEID_FORMAT));
+        }
+
+        if (resource
+                .getProperty(IdentityRegistryResources.PROP_SAML_SSO_ENABLE_NAMEID_CLAIMURI) != null) {
+            if (new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_ENABLE_NAMEID_CLAIMURI)
+                    .trim())) {
+                serviceProviderDO.setNameIdClaimUri(resource.
+                        getProperty(IdentityRegistryResources.PROP_SAML_SSO_NAMEID_CLAIMURI));
+            }
+        }
+
+        serviceProviderDO.setLoginPageURL(resource.
+                getProperty(IdentityRegistryResources.PROP_SAML_SSO_LOGIN_PAGE_URL));
+
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_DO_SIGN_RESPONSE) != null) {
+            serviceProviderDO.setDoSignResponse(new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_DO_SIGN_RESPONSE).trim()));
+        }
+
+        if (serviceProviderDO.isDoSingleLogout()) {
+            serviceProviderDO.setSloResponseURL(resource.getProperty(IdentityRegistryResources
+                    .PROP_SAML_SLO_RESPONSE_URL));
+            serviceProviderDO.setSloRequestURL(resource.getProperty(IdentityRegistryResources
+                    .PROP_SAML_SLO_REQUEST_URL));
+        }
+
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_DO_SIGN_ASSERTIONS) != null) {
+            serviceProviderDO.setDoSignAssertions(new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_DO_SIGN_ASSERTIONS).trim()));
+        }
+
+        if (resource
+                .getProperty(IdentityRegistryResources.PROP_SAML_SSO_ATTRIB_CONSUMING_SERVICE_INDEX) != null) {
+            serviceProviderDO
+                    .setAttributeConsumingServiceIndex(resource
+                            .getProperty(IdentityRegistryResources.PROP_SAML_SSO_ATTRIB_CONSUMING_SERVICE_INDEX));
+        } else {
+            // Specific DB's (like oracle) returns empty strings as null.
+            serviceProviderDO.setAttributeConsumingServiceIndex("");
+        }
+
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_CLAIMS) != null) {
+            serviceProviderDO.setRequestedClaims(resource
+                    .getPropertyValues(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_CLAIMS));
+        }
+
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_AUDIENCES) != null) {
+            serviceProviderDO.setRequestedAudiences(resource
+                    .getPropertyValues(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_AUDIENCES));
+        }
+
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_RECIPIENTS) != null) {
+            serviceProviderDO.setRequestedRecipients(resource
+                    .getPropertyValues(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_RECIPIENTS));
+        }
+
+        if (resource
+                .getProperty(IdentityRegistryResources.PROP_SAML_SSO_ENABLE_ATTRIBUTES_BY_DEFAULT) != null) {
+            String enableAttrByDefault = resource
+                    .getProperty(IdentityRegistryResources.PROP_SAML_SSO_ENABLE_ATTRIBUTES_BY_DEFAULT);
+            if ("true".equals(enableAttrByDefault)) {
+                serviceProviderDO.setEnableAttributesByDefault(true);
+            } else {
+                serviceProviderDO.setEnableAttributesByDefault(false);
+            }
+        }
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_IDP_INIT_SSO_ENABLED) != null) {
+            serviceProviderDO.setIdPInitSSOEnabled(new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_IDP_INIT_SSO_ENABLED).trim()));
+        }
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SLO_IDP_INIT_SLO_ENABLED) != null) {
+            serviceProviderDO.setIdPInitSLOEnabled(new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SLO_IDP_INIT_SLO_ENABLED).trim()));
+            if (serviceProviderDO.isIdPInitSLOEnabled() && resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_IDP_INIT_SLO_RETURN_URLS) != null) {
+                serviceProviderDO.setIdpInitSLOReturnToURLs(resource.getPropertyValues(
+                        IdentityRegistryResources.PROP_SAML_IDP_INIT_SLO_RETURN_URLS));
+            }
+        }
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_ENABLE_ENCRYPTED_ASSERTION) != null) {
+            serviceProviderDO.setDoEnableEncryptedAssertion(new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_ENABLE_ENCRYPTED_ASSERTION).trim()));
+        }
+        if (resource.getProperty(IdentityRegistryResources.PROP_SAML_SSO_VALIDATE_SIGNATURE_IN_REQUESTS) != null) {
+            serviceProviderDO.setDoValidateSignatureInRequests(new Boolean(resource.getProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_VALIDATE_SIGNATURE_IN_REQUESTS).trim()));
+        }
+        return serviceProviderDO;
+    }
+
+    public boolean addServiceProvider(SAMLSSOServiceProviderDO serviceProviderDO)
+            throws IdentityException {
+
+
+
+        String path = null;
+        Resource resource;
+
+        if (serviceProviderDO.getIssuer() != null) {
+            path = IdentityRegistryResources.SAML_SSO_SERVICE_PROVIDERS
+                    + encodePath(serviceProviderDO.getIssuer());
+        }
+
+        boolean isTransactionStarted = Transaction.isStarted();
+        try {
+            if (registry.resourceExists(path)) {
+                if (log.isDebugEnabled()) {
+                    log.debug("Service Provider already exists with the same issuer name"
+                            + serviceProviderDO.getIssuer());
+                }
+                return false;
+            }
+
+            resource = createResource(serviceProviderDO);
+            try {
+                if (!isTransactionStarted) {
+                    registry.beginTransaction();
+                }
+
+                registry.put(path, resource);
+
+                if (!isTransactionStarted) {
+                    registry.commitTransaction();
+                }
+
+            } catch (RegistryException e) {
+                if (!isTransactionStarted) {
+                    registry.rollbackTransaction();
+                }
+                throw e;
+            }
+
+        } catch (RegistryException e) {
+            log.error("Error While adding Service Provider", e);
+            throw IdentityException.error("Error while adding Service Provider", e);
+        }
+
+        if (log.isDebugEnabled()) {
+            log.debug("Service Provider " + serviceProviderDO.getIssuer()
+                    + " is added successfully.");
+        }
+        return true;
+    }
+
+    private Resource createResource(SAMLSSOServiceProviderDO serviceProviderDO) throws RegistryException {
+        Resource resource;
+        resource = registry.newResource();
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_ISSUER,
+                serviceProviderDO.getIssuer());
+        resource.setProperty(IdentityRegistryResources.PROP_SAML_SSO_ASSERTION_CONS_URLS,
+                serviceProviderDO.getAssertionConsumerUrlList());
+        resource.addProperty(IdentityRegistryResources.PROP_DEFAULT_SAML_SSO_ASSERTION_CONS_URL,
+                serviceProviderDO.getDefaultAssertionConsumerUrl());
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_ISSUER_CERT_ALIAS,
+                serviceProviderDO.getCertAlias());
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_LOGIN_PAGE_URL,
+                serviceProviderDO.getLoginPageURL());
+        resource.addProperty(
+                IdentityRegistryResources.PROP_SAML_SSO_NAMEID_FORMAT,
+                serviceProviderDO.getNameIDFormat());
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_SIGNING_ALGORITHM, serviceProviderDO
+                .getSigningAlgorithmUri());
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_DIGEST_ALGORITHM, serviceProviderDO
+                .getDigestAlgorithmUri());
+        if (serviceProviderDO.getNameIdClaimUri() != null
+                && serviceProviderDO.getNameIdClaimUri().trim().length() > 0) {
+            resource.addProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_ENABLE_NAMEID_CLAIMURI,
+                    "true");
+            resource.addProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_NAMEID_CLAIMURI,
+                    serviceProviderDO.getNameIdClaimUri());
+        } else {
+            resource.addProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_ENABLE_NAMEID_CLAIMURI,
+                    "false");
+        }
+
+        String doSingleLogout = serviceProviderDO.isDoSingleLogout() ? "true" : "false";
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_DO_SINGLE_LOGOUT, doSingleLogout);
+        if (serviceProviderDO.isDoSingleLogout()) {
+            if (StringUtils.isNotBlank(serviceProviderDO.getSloResponseURL())) {
+                resource.addProperty(IdentityRegistryResources.PROP_SAML_SLO_RESPONSE_URL,
+                        serviceProviderDO.getSloResponseURL());
+            }
+            if (StringUtils.isNotBlank(serviceProviderDO.getSloRequestURL())) {
+                resource.addProperty(IdentityRegistryResources.PROP_SAML_SLO_REQUEST_URL,
+                        serviceProviderDO.getSloRequestURL());
+            }
+        }
+
+        String doSignResponse = serviceProviderDO.isDoSignResponse() ? "true" : "false";
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_DO_SIGN_RESPONSE,
+                doSignResponse);
+        String doSignAssertions = serviceProviderDO.isDoSignAssertions() ? "true" : "false";
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_DO_SIGN_ASSERTIONS,
+                doSignAssertions);
+        if (serviceProviderDO.getRequestedClaimsList() != null
+                && serviceProviderDO.getRequestedClaimsList().size() > 0) {
+            resource.setProperty(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_CLAIMS,
+                    serviceProviderDO.getRequestedClaimsList());
+        }
+        if (serviceProviderDO.getAttributeConsumingServiceIndex() != null) {
+            resource.addProperty(
+                    IdentityRegistryResources.PROP_SAML_SSO_ATTRIB_CONSUMING_SERVICE_INDEX,
+                    serviceProviderDO.getAttributeConsumingServiceIndex());
+        }
+        if (serviceProviderDO.getRequestedAudiencesList() != null
+                && serviceProviderDO.getRequestedAudiencesList().size() > 0) {
+            resource.setProperty(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_AUDIENCES,
+                    serviceProviderDO.getRequestedAudiencesList());
+        }
+        if (serviceProviderDO.getRequestedRecipientsList() != null
+                && serviceProviderDO.getRequestedRecipientsList().size() > 0) {
+            resource.setProperty(IdentityRegistryResources.PROP_SAML_SSO_REQUESTED_RECIPIENTS,
+                    serviceProviderDO.getRequestedRecipientsList());
+        }
+
+        String enableAttributesByDefault = serviceProviderDO.isEnableAttributesByDefault() ? "true"
+                : "false";
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_ENABLE_ATTRIBUTES_BY_DEFAULT,
+                enableAttributesByDefault);
+        String idPInitSSOEnabled = serviceProviderDO.isIdPInitSSOEnabled() ? "true" : "false";
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_IDP_INIT_SSO_ENABLED,
+                idPInitSSOEnabled);
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SLO_IDP_INIT_SLO_ENABLED,
+                serviceProviderDO.isIdPInitSLOEnabled() ? "true" : "false");
+        if (serviceProviderDO.isIdPInitSLOEnabled() && serviceProviderDO.getIdpInitSLOReturnToURLList().size() > 0) {
+            resource.setProperty(IdentityRegistryResources.PROP_SAML_IDP_INIT_SLO_RETURN_URLS,
+                    serviceProviderDO.getIdpInitSLOReturnToURLList());
+        }
+        String enableEncryptedAssertion = serviceProviderDO.isDoEnableEncryptedAssertion() ? "true" : "false";
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_ENABLE_ENCRYPTED_ASSERTION,
+                enableEncryptedAssertion);
+
+        String validateSignatureInRequests = serviceProviderDO.isDoValidateSignatureInRequests() ? "true" : "false";
+        resource.addProperty(IdentityRegistryResources.PROP_SAML_SSO_VALIDATE_SIGNATURE_IN_REQUESTS,
+                validateSignatureInRequests);
+        return resource;
+    }
+
+    public SAMLSSOServiceProviderDO[] getServiceProviders() throws IdentityException {
+        SAMLSSOServiceProviderDO[] serviceProvidersList = new SAMLSSOServiceProviderDO[0];
+        try {
+            if (registry.resourceExists(IdentityRegistryResources.SAML_SSO_SERVICE_PROVIDERS)) {
+                String[] providers = (String[]) registry.get(
+                        IdentityRegistryResources.SAML_SSO_SERVICE_PROVIDERS).getContent();
+                if (providers != null) {
+                    serviceProvidersList = new SAMLSSOServiceProviderDO[providers.length];
+                    for (int i = 0; i < providers.length; i++) {
+                        serviceProvidersList[i] = resourceToObject(registry.get(providers[i]));
+                    }
+                }
+            }
+        } catch (RegistryException e) {
+            log.error("Error reading Service Providers from Registry", e);
+            throw IdentityException.error("Error reading Service Providers from Registry", e);
+        }
+        return serviceProvidersList;
+    }
+
+    /**
+     * Remove the service provider with the given name
+     *
+     * @param issuer
+     * @throws IdentityException
+     */
+    public boolean removeServiceProvider(String issuer) throws IdentityException {
+
+        if (issuer == null || StringUtils.isEmpty(issuer.trim())) {
+            throw new IllegalArgumentException("Trying to delete issuer \'" + issuer + "\'");
+        }
+
+        String path = IdentityRegistryResources.SAML_SSO_SERVICE_PROVIDERS + encodePath(issuer);
+        boolean isTransactionStarted = Transaction.isStarted();
+        try {
+            if (registry.resourceExists(path)) {
+                try {
+                    if (!isTransactionStarted) {
+                        registry.beginTransaction();
+                    }
+
+                    registry.delete(path);
+
+                    if (!isTransactionStarted) {
+                        registry.commitTransaction();
+                    }
+
+                    return true;
+
+                } catch (RegistryException e) {
+                    if (!isTransactionStarted) {
+                        registry.rollbackTransaction();
+                    }
+                    throw e;
+                }
+            }
+        } catch (RegistryException e) {
+            log.error("Error removing the service provider from the registry", e);
+            throw IdentityException.error("Error removing the service provider from the registry", e);
+        }
+
+        return false;
+    }
+
+    /**
+     * Get the service provider
+     *
+     * @param issuer
+     * @return
+     * @throws IdentityException
+     */
+    public SAMLSSOServiceProviderDO getServiceProvider(String issuer) throws IdentityException {
+
+        String path = IdentityRegistryResources.SAML_SSO_SERVICE_PROVIDERS + encodePath(issuer);
+        SAMLSSOServiceProviderDO serviceProviderDO = null;
+
+        UserRegistry userRegistry = null;
+        String tenantDomain = null;
+        try {
+            userRegistry = (UserRegistry) registry;
+            tenantDomain = IdentityTenantUtil.getRealmService().getTenantManager().getDomain(userRegistry.getTenantId());
+            if (registry.resourceExists(path)) {
+                serviceProviderDO = resourceToObject(registry.get(path));
+                serviceProviderDO.setTenantDomain(tenantDomain);
+            }
+        } catch (RegistryException e) {
+            throw IdentityException.error("Error occurred while checking if resource path \'" + path + "\' exists in " +
+                    "registry for tenant domain : " + tenantDomain, e);
+        } catch (UserStoreException e) {
+            throw IdentityException.error("Error occurred while getting tenant domain from tenant ID : " +
+                    userRegistry.getTenantId(), e);
+        }
+
+        return serviceProviderDO;
+    }
+
+    public boolean isServiceProviderExists(String issuer) throws IdentityException {
+        String path = IdentityRegistryResources.SAML_SSO_SERVICE_PROVIDERS + encodePath(issuer);
+        try {
+            return registry.resourceExists(path);
+        } catch (RegistryException e) {
+            throw IdentityException.error("Error occurred while checking if resource path \'" + path + "\' exists in " +
+                    "registry");
+        }
+    }
+
+    private String encodePath(String path) {
+        String encodedStr = new String(Base64.encodeBase64(path.getBytes()));
+        return encodedStr.replace("=", "");
+    }
+
+    /**
+     * Upload service Provider
+     *
+     * @param serviceProviderDO
+     * @return
+     * @throws IdentityException
+     */
+
+
+    public SAMLSSOServiceProviderDO uploadServiceProvider(SAMLSSOServiceProviderDO serviceProviderDO) throws IdentityException {
+
+        if (serviceProviderDO.getIssuer() != null && serviceProviderDO.getAssertionConsumerUrl() != null) {
+            String path = IdentityRegistryResources.SAML_SSO_SERVICE_PROVIDERS + encodePath(serviceProviderDO
+                    .getIssuer());
+            Resource resource;
+
+            boolean isTransactionStarted = Transaction.isStarted();
+            try {
+                if (registry.resourceExists(path)) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Service Provider already exists with the same issuer name" + serviceProviderDO
+                                .getIssuer());
+                    }
+                    throw IdentityException.error("Service provider already exists");
+                }
+
+                resource = createResource(serviceProviderDO);
+
+//                resource.setContent(metadata.getBytes());
+
+                try {
+                    if (!isTransactionStarted) {
+                        registry.beginTransaction();
+                    }
+
+                    registry.put(path, resource);
+
+                    if (!isTransactionStarted) {
+                        registry.commitTransaction();
+                    }
+
+                } catch (RegistryException e) {
+                    if (!isTransactionStarted) {
+                        registry.rollbackTransaction();
+                    }
+                    throw e;
+                }
+
+            } catch (RegistryException e) {
+                throw IdentityException.error("Error while adding Service Provider.", e);
+            }
+
+            if (log.isDebugEnabled()) {
+                log.debug("Service Provider " + serviceProviderDO.getIssuer() + " is added successfully.");
+            }
+        } else {
+            throw IdentityException.error("Invalid Service Provider Metadata.");
+        }
+
+
+        return serviceProviderDO;
+
+    }
+
+    /**
+     * generate an opensaml metadata object from a metadata string
+     *
+     * @param metadataString
+     * @return
+     */
+
+
+    /**
+     * convert a opensaml metadata object to a SAMLSSOServiceProviderDO
+     *
+     * @param entityDescriptor
+     * @param samlssoServiceProviderDO
+     * @return
+     */
+
+}
Index: components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/session/SSOSessionPersistenceManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/session/SSOSessionPersistenceManager.java	(revision 2d753c2212af683441ef7ff6da3e015b0b1e407f)
+++ components/org.wso2.carbon.identity.sso.saml/src/main/java/org/wso2/carbon/identity/sso/saml/session/SSOSessionPersistenceManager.java	(revision )
@@ -22,7 +22,7 @@
 import org.wso2.carbon.identity.base.IdentityException;
 
 //import org.wso2.carbon.identity.saml.metadata.model.SAMLSSOServiceProviderDO;
-import org.wso2.carbon.identity.core.model.SAMLSSOServiceProviderDO;
+import org.wso2.carbon.identity.sso.saml.common.model.SAMLSSOServiceProviderDO;
 import org.wso2.carbon.identity.sso.saml.cache.SAMLSSOParticipantCache;
 import org.wso2.carbon.identity.sso.saml.cache.SAMLSSOParticipantCacheEntry;
 import org.wso2.carbon.identity.sso.saml.cache.SAMLSSOParticipantCacheKey;
